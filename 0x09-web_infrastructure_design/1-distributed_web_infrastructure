Components:
1. Server 1 (8.8.8.8): Hosting machine for the entire infrastructure.
2. Server 2:  Additional server for redundancy and improved availability.
3. Load Balancer (HAproxy): Distributes incoming requests to the two application servers.
4. Web Server (Nginx): Handles HTTP requests, serves static content.
5. Application Servers (App1, App2):  Process dynamic content, interact with the application code.
6. Application Files (Code Base):  Contains the code for the website.
7. Database (MySQL - Primary & Replica):  Primary node for read-write operations and replica node for read-only operations, improving scalability and redundancy.
 Design Explanation:
1. User Access Scenario: User initiates access to www.foobar.com and DNS resolves www to the Load Balancer.
2. Load Balancer: HA proxy with Round Robin distribution and distributes requests to App1 and App2 for load balancing.
3. Application Servers (App1, App2): Two application servers (Server 1 and Server 2) for redundancy, load distribution, and improved availability.

4. Web Server (Nginx):  Handles HTTP requests, serves static content.
5. Application Files (Code Base): Contains the code for the website and deployed on both App1 and App2 for redundancy.
6. Database (MySQL - Primary & Replica): Primary node for read-write operations and replica node for read-only operations, improving scalability and redundancy.
Additional Notes:
Reasons for Additional Elements
  Server 2: Added for redundancy and improved availability.
  Load Balancer: Distributes traffic across application servers.
  Database Replica:  Enhances scalability and provides redundancy.
Load Balancer Configuration:
  Distribution Algorithm: Round Robin.
  Explanation: Distributes requests in a cyclic order to App1 and App2.
Load-Balancer Setup:
  Active-Active Setup: Both App1 and App2 actively handle traffic.
Database Primary-Replica Cluster:
  Primary Node:  Handles read-write operations.
  Replica Node: Handles read-only operations, improving performance. Issues with the Infrastructure:
1. Single Points of Failure (SPOF): Potential SPOFs exist in the load balancer, web server, and application servers.
2. Security Issues: No firewall mentioned in the design, posing a security risk and lack of HTTPS implementation for secure communication.
3. Monitoring: No monitoring tools mentioned, making it challenging to identify and address issues proactively.

